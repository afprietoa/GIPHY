{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","idx","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","console","log","className","src","alt","GifGrid","img","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAG7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeI,OACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,GACxBR,GAAc,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,QAOtC,SAEI,uBACIC,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAmBXG,YAAY,kB,+BC3BfC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAGxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAiBZM,GAjBY,4CAAH,sDCuCLO,EA/BM,SAACf,GAElB,MAA0Bf,mBAAS,CAC/BsB,KAAK,GACLS,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OArBAC,qBAAU,WAENpB,EAAQC,GACPoB,MAAK,SAACC,GAEHH,EAAS,CACTX,KAAKc,EACLL,SAAS,SAKd,CAAChB,IASGiB,GCpCEK,EAAc,SAAC,GAAkB,IAAjBV,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIhC,OAFAqB,QAAQC,IAAK,CAAEZ,QAAOV,QAGlB,sBAAKuB,UAAU,yCAAf,UACI,qBAAKC,IAAKxB,EAAKyB,IAAKf,IACpB,4BAAIA,QCFHgB,EAAU,SAAC,GAAgB,IAAf5B,EAAc,EAAdA,SAerB,EAA6Be,EAAaf,GAA9BQ,EAAZ,EAAOD,KAAWS,EAAlB,EAAkBA,QAGlB,OACI,qCACI,qBAAIS,UAAU,oCAAd,cAAoDzB,EAApD,OACCgB,GAAW,oBAAIS,UAAU,mCAAd,wBAChB,qBAAKA,UAAU,YAAf,SAIYjB,EAAKC,KAAK,SAACoB,GAAD,OAEN,cAAC,EAAD,eAEIA,GADCA,EAAIlB,aCClBmB,EAjCM,WAErB,MAAqC7C,mBAAU,CAAC,cAAhD,mBAAQ8C,EAAR,KAAoB/C,EAApB,KAME,OACE,qCAEE,oBAAIyC,UAAU,WAAd,yBAEE,cAAC,EAAD,CAAazC,cAAeA,IAE5B,uBAIA,6BAEQ+C,EAAWtB,KAAK,SAAAT,GAAQ,OAEpB,aADF,CACG,EAAD,CAEAA,SAAUA,GADLA,Y,MCrBzBgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.9c7eb119.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    //Necesito saber lo que la persona esta escribiendo por eso agrego un useState\r\nconst [inputValue, setInputValue] = useState('')\r\n\r\nconst handleInputChange = (e) =>{\r\n    setInputValue(e.target.value)\r\n}\r\nconst handleSubmit = (e) =>{\r\n    e.preventDefault()\r\n\r\n    if(inputValue.trim().length>2){\r\n        setCategories(idx => [ inputValue, ...idx])\r\n    }\r\n   \r\n}\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        {/* <h1>{inputValue}</h1> */}\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Search GIF\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","//helpers van a ser funciones que hacen cierto trabajo en especifico, pueden recibir unas argumentos los procesan y hacen algun return\r\n\r\nexport const getGifs = async ( category ) => {\r\n    //encodeURI: Reemplaza los espacios por porcentaje 20 entre otras cosas|\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&limit=10&api_key=WhCV9n8rpqCJOPh5NNN2grEEjvWhdZBI`\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json()\r\n\r\n    //para extraer cada información se barren esos gifs\r\n    const gifs = data.map(gif =>{\r\n        //el return va a transformar cada uno de los elementos que estan dentro del arreglo\r\n        // y voy a retornar  un nuevo objeto con la información de interés\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            //se coloca el signo de interrogación para asegurarse de que si se traen las imagenes\r\n            url: gif.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs\r\n\r\n}","//el use signigica que es un Hook, hooks no son más que funciones\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n// import React from 'react'\r\n//la importación de react no es necesaria al menos que se regrese jsx\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n        .then((imgs)=>{\r\n\r\n            setState({\r\n            data:imgs,\r\n            loading: false\r\n            })\r\n            \r\n        })\r\n\r\n    }, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data:[1,2,3,4,5,6,7,8,9],\r\n    //         loading:false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state //{data:[],loading:true}\r\n}\r\n\r\nexport default useFetchGifs\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    console.log( { title, url} )\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n// import { useEffect , useState } from 'react'\r\n\r\n// import { getGifs } from '../helpers/getGifs'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n //Custom Hooks: extraen lógica a reutilizar de algún componente de forma sencilla.\r\n   \r\n // const [images, setImages] = useState([])\r\n\r\n   \r\n\r\n    // useEffect( () => {\r\n    //     getGifs(category).then(setImages)\r\n    // },[category])\r\n\r\n    //Se recibe una categoria y se hace una peticion http\r\n\r\n    \r\n    const {data:gifs, loading} = useFetchGifs(category)\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__fadeIn\"> {category} </h2>\r\n            {loading && <h3 className=\"animate__animated animate__flash\">Loading...</h3>}\r\n        <div className=\"card-grid\">\r\n                \r\n           \r\n                {\r\n                    gifs.map( (img) =>(\r\n                        \r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img} \r\n                        />\r\n                     ))\r\n                }\r\n          \r\n\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n\r\nconst [ categories, setCategories] = useState (['One Punch']);\r\n\r\n// const handleAdd =  () =>{\r\n//     setCategories([...categories, 'Vegeta'])\r\n// }\r\n\r\n  return (\r\n    <>\r\n\r\n      <h1 className=\"title-SG\">Search Gifs</h1>\r\n\r\n        <AddCategory setCategories={setCategories}/>\r\n\r\n        <hr/>\r\n\r\n        {/* <button onClick={handleAdd} >ADD</button> */}\r\n\r\n        <ol>\r\n            {\r\n                categories.map( category =>(\r\n                  // para objetos se encierra entre parentesis ()\r\n                    <GifGrid \r\n                    key={category}\r\n                    category={category} />\r\n               ))\r\n            }\r\n        </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GitExpertApp\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}